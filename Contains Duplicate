#Solution 1 - Naive Solution, Poor Runtime
class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<Integer,Integer>();
        for(int i = 0 ;i < nums.length; i++) {
            if(map.containsKey(nums[i])) {
                map.put(nums[i], map.get(nums[i]) + 1);
            } else {
                map.put(nums[i], 1);
            }
        }
        
        for(Map.Entry<Integer,Integer> entry: map.entrySet()){
            if(entry.getValue() > 1){
                return true;
            }
        }
        return false;
    }
}

#Solution 2 - Should have optimised like this

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
    for (int num: nums) {
        if (map.containsKey(num))
            return true;
        map.put(num, 0);
    }
    return false;
    }
}


#Solution 3 - Better Runtime

class Solution {
    public boolean containsDuplicate(int[] nums) {
        if (nums == null || nums.length < 2) return false;
        Set<Integer> set = new HashSet<>();
        for (int n: nums) {
            if (!set.add(n)) return true;
        }
        return false;
    }
}

#Solution 4- Best so far, O(nlogn)

class Solution {
    public boolean containsDuplicate(int[] nums) {
    Arrays.sort(nums);
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] == nums[i-1])
            return true;
    }
    return false;
  }
}

