Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number
, also in sorted non-decreasing order.

#Solution 1 - Dumb Solution
class Solution {
    public int findNumbers(int[] nums) {
        int res = 0;
        for(int i = 0 ; i< nums.length ; i++) {
            res += isEvenDigits(nums[i]);
        }
        return res;
    }
    
    public int isEvenDigits(int n){
        int count = 0; 
        while(n != 0) {
            n = n/10 ;
            count++ ;
        }        
       if(count % 2 == 0) {
            return 1;
        }
        return 0;
    }
}

#Solution 2 - O(n)

class Solution {
    public int[] sortedSquares(int[] A) {
        int n = A.length;
        int[] result = new int[n];
        int i = 0, j = n - 1;
        for (int p = n - 1; p >= 0; p--) {
            if (Math.abs(A[i]) > Math.abs(A[j])) {
                result[p] = A[i] * A[i];
                i++;
            } else {
                result[p] = A[j] * A[j];
                j--;
            }
        }
        return result;
    }
}
