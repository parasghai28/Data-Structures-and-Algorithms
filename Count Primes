#Solution 1- Naive and TLE

class Solution {
    public int countPrimes(int n) {
        int ans = 0;
        if(n==1 || n==2) {
            return 0;
        }
        for(int i = 2 ; i<n ; i++ ) {
            if(isPrime(i)) {
                ans++;
            }
        }
        return ans;
    }
    
    public Boolean isPrime(int num) {
        int numOfFactors= 0;
        for(int i=1; i<= Math.sqrt(num); i++) {
            if(num % i == 0) {
                numOfFactors++;
            }
        }
        if(numOfFactors == 1) {
            return true;
        } else {
            return false;
        }
    } 
}


#Solution 2 - Optimized and yet TLE

class Solution {
    public int countPrimes(int n) {
        int ans = 0;
        for(int i = 1 ; i < n ; i++ ) {
            if(isPrime(i)) {
                ans++;
            }
        }
        return ans;
    }
    
    public Boolean isPrime(int num) {
        if(num <= 1) {
            return false;
        }
        int numOfFactors= 0;
        for(int i=2; i<= Math.sqrt(num); i++) {
            if(num % i == 0) {
                return false;
            }
        }
        return true;
    }
}


#Solution 3 -ERATOSTHENES Therom of finding primes, worked but slow, optimization needed

class Solution {
    public int countPrimes(int n) {
        int ans = 0;
        Boolean[] primes = new Boolean[n];
        for(int i = 2; i < primes.length; i++) {
            primes[i] = true;
        }
        
        for(int i = 2 ; i < n ; i++){
            if(primes[i] == true) {
                for(int j = 2; i*j < n ; j++ ){
                    primes[i*j] = false;
                }
            }
        }
        
        for(int i = 2; i < primes.length; i++ ){
            if(primes[i] == true) {
                ans++;
            }
        }
     return ans;   
    }   
}

#Solution 4- Optimized yet slow

class Solution {
    public int countPrimes(int n) {
        int ans = 0;
        Boolean[] primes = new Boolean[n];
        for(int i = 2; i < primes.length; i++) {
            primes[i] = true;
        }
        
        for(int i = 2 ; i <= Math.sqrt(n) ; i++){
            if(primes[i] == true) {
                for(int j = 2; i*j < n ; j++ ){
                    primes[i*j] = false;
                }
            }
        }
        
        for(int i = 2; i < primes.length; i++ ){
            if(primes[i] == true) {
                ans++;
            }
        }
     return ans;   
    }   
}
